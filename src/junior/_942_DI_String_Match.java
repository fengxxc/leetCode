package junior;

public class _942_DI_String_Match {
	/**
	 * 题意：根据给定的字符串S（仅包含字符’I’和’D’），返回一个包含元素[0,N]的数组A（N是字符串的长度）；要求数组中下标i处的元素，满足A[i] < A[i+1]（如果Si处的字符为‘I’）或者A[i] > A[i+1]（如果Si处的字符为‘D’）；
	 * 解法：满足条件的结果有很多，只需要找到一个符合条件的元素排列即可；假设我们默认数组中的元素是递增排列的，那么此时影响结果的就是S中的字符‘D’，只需要解决字符‘D’对应数组下标位置处的元素，令其符合条件即可；
	 * 我们可以这么做：首先遍历字符串S，每碰到一个字符‘D’时，将当前可分配的元素中的最大值赋予数组对应位置处，这样遍历完字符串S后，我们得到的数组就已经解决了字符‘D’的问题，
	 * 这时候，只需要遍历数组将其没有赋值的位置，按照剩余可分配元素从小到大的顺序依次填充即可；
	 * 
	 */
}
