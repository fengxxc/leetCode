package junior;

import java.util.BitSet;

/**
 * 有效的数独
 *
 * 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
 *
 * 1.数字 1-9 在每一行只能出现一次。
 * 2.数字 1-9 在每一列只能出现一次。
 * 3.数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
 *
 * 数独部分空格内已填入了数字，空白格用 '.' 表示。
 *
 * 示例 1:
 *
 * 输入:
 * [
 *   ["5","3",".",".","7",".",".",".","."],
 *   ["6",".",".","1","9","5",".",".","."],
 *   [".","9","8",".",".",".",".","6","."],
 *   ["8",".",".",".","6",".",".",".","3"],
 *   ["4",".",".","8",".","3",".",".","1"],
 *   ["7",".",".",".","2",".",".",".","6"],
 *   [".","6",".",".",".",".","2","8","."],
 *   [".",".",".","4","1","9",".",".","5"],
 *   [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: true
 *
 * 示例 2:
 *
 * 输入:
 * [
 *   ["8","3",".",".","7",".",".",".","."],
 *   ["6",".",".","1","9","5",".",".","."],
 *   [".","9","8",".",".",".",".","6","."],
 *   ["8",".",".",".","6",".",".",".","3"],
 *   ["4",".",".","8",".","3",".",".","1"],
 *   ["7",".",".",".","2",".",".",".","6"],
 *   [".","6",".",".",".",".","2","8","."],
 *   [".",".",".","4","1","9",".",".","5"],
 *   [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: false
 * 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
 *      但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 *
 * 说明:
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 给定数独序列只包含数字 1-9 和字符 '.' 。
 * 给定数独永远是 9x9 形式的。
 */
public class _36_Valid_Sudoku {
    public static boolean isValidSudoku(char[][] board) {
        BitSet[] row = new BitSet[9];
        BitSet[] col = new BitSet[9];
        BitSet[] box = new BitSet[9];
        for (int i = 0; i < 9; i++) {
            row[i] = new BitSet();
            col[i] = new BitSet();
            box[i] = new BitSet();
        }

        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                char cur = board[i][j];
                if (cur == '.') continue;
                if (row[i].get(cur)) return false;
                if (col[j].get(cur)) return false;
                int k = i / 3 * 3 + j / 3;
                if (box[k].get(cur)) return false;
                row[i].set(cur);
                col[j].set(cur);
                box[k].set(cur);
            }
        }
        return true;
    }

    public static void main(String[] args) {
        char[][] board1 = {
                {'5', '3', '.',  '.', '7', '.',  '.', '.', '.'},
                {'6', '.', '.',  '1', '9', '5',  '.', '.', '.'},
                {'.', '9', '8',  '.', '.', '.',  '.', '6', '.'},

                {'8', '.', '.',  '.', '6', '.',  '.', '.', '3'},
                {'4', '.', '.',  '8', '.', '3',  '.', '.', '1'},
                {'7', '.', '.',  '.', '2', '.',  '.', '.', '6'},

                {'.', '6', '.',  '.', '.', '.',  '2', '8', '.'},
                {'.', '.', '.',  '4', '1', '9',  '.', '.', '5'},
                {'.', '.', '.',  '.', '8', '.',  '.', '7', '9'}
        };
        boolean validSudoku1 = isValidSudoku(board1);
        System.out.println(validSudoku1);

        char[][] board2 = {
                {'8', '3', '.',  '.', '7', '.',  '.', '.', '.'},
                {'6', '.', '.',  '1', '9', '5',  '.', '.', '.'},
                {'.', '9', '8',  '.', '.', '.',  '.', '6', '.'},

                {'8', '.', '.',  '.', '6', '.',  '.', '.', '3'},
                {'4', '.', '.',  '8', '.', '3',  '.', '.', '1'},
                {'7', '.', '.',  '.', '2', '.',  '.', '.', '6'},

                {'.', '6', '.',  '.', '.', '.',  '2', '8', '.'},
                {'.', '.', '.',  '4', '1', '9',  '.', '.', '5'},
                {'.', '.', '.',  '.', '8', '.',  '.', '7', '9'}
        };
        boolean validSudoku2 = isValidSudoku(board2);
        System.out.println(validSudoku2);

    }
}
